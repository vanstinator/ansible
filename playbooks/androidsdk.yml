---
- name: Install Android SDK and NDK
  hosts: all
  # become: yes
  vars:
    user: "runner"
    android_sdk_version: "11076708"
    android_sdk_checksum: "sha256:7bc5c72ba0275c80a8f19684fb92793b83a6b5c94d4d179fc5988930282d7e64"
    android_build_tools_version: "34.0.0"
    android_platform_versions:
      - "android-34"
      - "android-35"
    android_ndk_version: "25.2.9519653"
    android_sdk_path: "/Users/{{user}}/Library/Android/sdk"
    android_ndk_path: "{{ android_sdk_path }}/ndk/{{ android_ndk_version }}"

  tasks:

    - name: Set macOS volume to 0
      ansible.builtin.command: osascript -e 'set volume 0' 

    - name: Make users passwordless for sudo in group runner
      become: yes
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%admin'
        line: '%admin ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Check if Spotlight is enabled
      command: mdutil -s /
      register: spotlight_status
      changed_when: false

    - name: Disable Spotlight
      command: sudo mdutil -a -i off
      when: "'Indexing enabled.' in spotlight_status.stdout"

    - name: Check if sleep is enabled
      become: yes
      ansible.builtin.shell: pmset -g | grep hibernatemode
      register: sleep_status
      changed_when: false
      ignore_errors: yes

    - name: Disable sleep
      become: yes
      command: sudo pmset -a hibernatemode 0
      when: "'hibernatemode 3' in sleep_status.stdout"

    - name: brew install Temurin JDK 17
      community.general.homebrew:
        name: 
          - temurin@17
        state: present

    - name: brew install additional dependencies
      homebrew:
        name:
          - ccache
          - git
          - gnu-tar
          - unzip
        state: present
        update_homebrew: yes

    - name: Download Android SDK tools
      get_url:
        url: "https://dl.google.com/android/repository/commandlinetools-mac-{{ android_sdk_version }}_latest.zip"
        dest: "/tmp/android-sdk.zip"
        checksum: "{{android_sdk_checksum}}"

    - name: Create Android SDK directory
      file:
        path: "{{ android_sdk_path }}"
        state: directory
        mode: '0755'

    - name: Create Android SDK cmdline-tools directory
      file:
        path: "{{ android_sdk_path }}/cmdline-tools"
        state: directory
        mode: '0755'

    - name: Extract Android SDK tools
      unarchive:
        src: "/tmp/android-sdk.zip"
        dest: "{{ android_sdk_path }}/cmdline-tools"
        remote_src: yes

    - name: Rename cmdline-tools directory
      command: mv {{ android_sdk_path }}/cmdline-tools/cmdline-tools {{ android_sdk_path }}/cmdline-tools/latest
      args:
        creates: "{{ android_sdk_path }}/cmdline-tools/latest"

    - name: Set up Android SDK environment variables
      lineinfile:
        path: "{{ ansible_env.HOME }}/.zshenv"
        regexp: "^export {{ item.var }}=.*"
        line: "export {{ item.var }}={{ item.value }}"
        create: yes
      loop:
        - { var: "ANDROID_HOME", value: "{{ android_sdk_path }}" }
        - { var: "ANDROID_SDK_ROOT", value: "{{ android_sdk_path }}" }
        - { var: "ANDROID_NDK_HOME", value: "{{ android_ndk_path }}" }
        - { var: "EAS_LOCAL_BUILD_WORKINGDIR", value: "/Users/runner/actions-runner/_work/rescuebase2/rescuebase2/eas" }

        
    - name: Add Homebrew shellenv to .zshenv
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.zshenv"
        line: 'eval "$(/opt/homebrew/bin/brew shellenv)"'
        insertafter: BOF
        state: present

    - name: Set up environment variables
      lineinfile:
        path: "{{ ansible_env.HOME }}/.zshenv"
        regexp: "^export PATH=.*"
        line: "export PATH={{ paths | join(':') }}:$PATH"
        create: yes
      vars:
        paths:
          - "{{ android_sdk_path }}/cmdline-tools/latest/bin"
          - "{{ android_sdk_path }}/platform-tools"
          - "{{ android_ndk_path }}"
          - "/Users/runner/node_modules/.bin"

    - name: Reset SSH Connection
      ansible.builtin.meta: reset_connection

    - name: Log the path
      debug:
        msg: "{{ ansible_env.PATH }}"

    - name: Accept Android SDK licenses
      command: "echo y | {{ android_sdk_path }}/cmdline-tools/latest/bin/sdkmanager --licenses || true"
      changed_when: false

      # Maestro has a specific version of the Android SDK that it requires when creating an emulator, so we install the one it wants.
    - name: Install Maestro Android SDK version
      ansible.builtin.shell: |
        yes | {{ android_sdk_path }}/cmdline-tools/latest/bin/sdkmanager 'system-images;android-34;google_apis;arm64-v8a'
      args:
        creates: "{{ android_sdk_path }}/system-images/android-34/google_apis/arm64-v8a"

    - name: Install Android emulator
      ansible.builtin.shell: |
        yes | {{ android_sdk_path }}/cmdline-tools/latest/bin/sdkmanager 'emulator'
      args:
        creates: "{{ android_sdk_path }}/emulator"

    # - name: Install Android SDK components and NDK
    #   ansible.builtin.shell: |
    #       yes | {{ android_sdk_path }}/cmdline-tools/latest/bin/sdkmanager "platform-tools"
    #   args:
    #     creates: "{{ android_sdk_path }}/platform-tools"

    # - name: Install Android SDK platforms
    #   command: "{{ android_sdk_path }}/cmdline-tools/latest/bin/sdkmanager 'platforms;{{ item }}'"
    #   loop: "{{ android_platform_versions }}"
    #   changed_when: false

    # - name: Uninstall Android SDK platforms not in the desired list
    #   command: "{{ android_sdk_path }}/cmdline-tools/latest/bin/sdkmanager --uninstall 'platforms;{{ item }}'"
    #   loop: "{{ sdk_list.stdout_lines | select('match', '^  platforms;android-') | map('regex_replace', '^  platforms;(android-[0-9]+)', '\\1') | difference(android_platform_versions) }}"
    #   when: item is defined
    #   changed_when: false

    - name: Ensure correct permissions for Android SDK directory
      file:
        path: "{{ android_sdk_path }}"
        state: directory
        recurse: yes
        owner: "{{ ansible_user_id }}"
        group: "staff"
        mode: 'u+rwX,g+rX,o+rX'

    - name: Create test_photos directory
      ansible.builtin.file:
        path: "~/test_photos"
        state: directory
  
    - name: Copy the shelter_records.jpg file from this repo to the machine test_photos directory
      ansible.builtin.copy:
        src: "./shelter_records.jpg"
        dest: "~/test_photos/shelter_records.jpg"

    - name: Update the Maestro_Pixel_6_API_34_1 emulator config.ini file
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.android/avd/Maestro_Pixel_6_API_34_1.avd/config.ini"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      with_items:
        - { regexp: '^hw.ramSize = ', line: 'hw.ramSize = 4096M' }
        - { regexp: '^vm.heapSize = ', line: 'vm.heapSize = 512M' }
        - { regexp: '^fastboot.forceChosenSnapshotBoot = ', line: 'fastboot.forceChosenSnapshotBoot = yes' }
        - { regexp: '^fastboot.forceColdBoot = ', line: 'fastboot.forceColdBoot = no' }
      
    - name: Start the Maestro_Pixel_6_API_34_1 emulator asynchronously
      ansible.builtin.shell: |
        {{ android_sdk_path }}/emulator/emulator -avd Maestro_Pixel_6_API_34_1
      args:
        chdir: "{{ android_sdk_path }}/emulator"
      async: 300
      poll: 0

    - name: Wait for the emulator to start
      ansible.builtin.shell: |
        while ! {{ android_sdk_path }}/platform-tools/adb shell getprop sys.boot_completed 2>/dev/null | grep -m 1 '1'; do sleep 5; done
      register: emulator_start
      retries: 12
      delay: 10
      until: emulator_start.rc == 0
        
    - name: Push the shelter_records.jpg file to the emulator
      ansible.builtin.shell: |
        {{ android_sdk_path }}/platform-tools/adb push ~/test_photos/shelter_records.jpg /sdcard/Download

    - name: Shut down the emulator
      ansible.builtin.shell: |
        {{ android_sdk_path }}/platform-tools/adb emu kill
